# 인접하지 않아도 교환이 가능하도록 개선한 알고리즘
import random
n = random.randint(1, 10)         # 흰 구슬(1)과 검은 구슬(0)의 각자 개수 : n
ls = [0]*n + [1]*n                      # 리스트에 총 2n개의 구슬 저장 (2~20개)
random.shuffle(ls)                      # 리스트를 무작위로 섞는다(shuffle)
print(ls)

i = 0                                   # 리스트의 좌측부터 탐색
k = len(ls)-1                           # 리스트의 우측부터 탐색
while i < k:                            # 두 포인터가 만났을때 반복 종료
    if ls[i] == 0 and ls[k] == 1:       # 좌측이 흑돌을, 우측이 백돌을 탐색한 경우 둘의 위치를 바꾼다.
        ls[i], ls[k] = ls[k], ls[i]
        print(ls)
        i += 1
        k -= 1
    elif ls[i] == 1 and ls[k] == 0:     # 좌측이 백돌을, 우측이 흑돌을 탐색한 경우로 포인터를 다음 위치로 이동시킨다.
        i += 1
        k -= 1
    elif ls[i] == 0 and ls[k] == 0:     # 좌측이 흑돌을, 우측도 흑돌을 탐색한 경우로 우측 포인터를 앞쪽으로 이동시킨다.
        k -= 1
    else:                               # 좌측이 백돌을, 우측은 백돌을 탐색한 경우로 좌측 포인터를 뒤쪽으로 이동시킨다.
        i += 1
